#!/usr/bin/python3
# -*- coding: utf-8 -*-

import threading
import queue
import time


def get_input(message, channel):
    """
    This is a function that uses input to assign an input value
    to a response and puts this response into a queue object.
    :response: Throw message, receive input and assign to response variable.
    :channel: queue.Queue()
    """
    response = input(message)
    channel.put(response)


def input_with_timeout(message='', timeout=1):
    """
    This function is a function that allows input to be received with a time limit.
    :channel: Queue object provided by queue.
    :message_to_be_provided: Input message and timeout arguments into a single string.
    :thread: As a Thread object, the target is a get_input function, and it is generated by
    handing over messages and queue objects that are arguments required by the get_input function.
    """
    channel = queue.Queue() # python version 2점대부터 존재
#    message = message + " [{} sec timeout] ".format(timeout)
#    message_to_be_provided = message + " [{} sec timeout] ".format(timeout)
    message_to_be_provided = message + f" [{timeout} sec timeout] "
    thread = threading.Thread(target=get_input, args=(message_to_be_provided, channel))
    # by setting this as a daemon thread, python won't wait for it to complete
    # python ver 3.3부터 daemon argument 추가
    thread.daemon = True
    thread.start()

    try:
        response = channel.get(True, timeout)
        return response
    # queue 객체가 비어 있음 
    except queue.Empty: pass
    return None


if __name__ == "__main__":
    # 지금의 문제?
    # timeout을넘긴 시점에도 sleep이 걸려있어  
    a = input_with_timeout()
    # sleep이 왜 필요한지 잘 모르겠다..?
    time.sleep(3)
    print(a)
